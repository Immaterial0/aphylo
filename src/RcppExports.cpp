// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// normal_prop
NumericVector normal_prop(const NumericVector& x, const NumericVector& lb, const NumericVector& ub, const NumericVector& scale);
RcppExport SEXP aphylo_normal_prop(SEXP xSEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(normal_prop(x, lb, ub, scale));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_sampler
NumericVector gibbs_sampler(const Function& fun, const NumericVector& x, const NumericVector& lb, const NumericVector& ub, double scale);
RcppExport SEXP aphylo_gibbs_sampler(SEXP funSEXP, SEXP xSEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type fun(funSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_sampler(fun, x, lb, ub, scale));
    return rcpp_result_gen;
END_RCPP
}
// MCMCcpp
NumericMatrix MCMCcpp(Function& fun, NumericVector theta0, int nbatch, const NumericVector& lb, const NumericVector& ub, const NumericVector& scale);
RcppExport SEXP aphylo_MCMCcpp(SEXP funSEXP, SEXP theta0SEXP, SEXP nbatchSEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Function& >::type fun(funSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< int >::type nbatch(nbatchSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMCcpp(fun, theta0, nbatch, lb, ub, scale));
    return rcpp_result_gen;
END_RCPP
}
// states
arma::imat states(int P);
RcppExport SEXP aphylo_states(SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(states(P));
    return rcpp_result_gen;
END_RCPP
}
// prob_mat
arma::mat prob_mat(const arma::vec& pr);
RcppExport SEXP aphylo_prob_mat(SEXP prSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pr(prSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_mat(pr));
    return rcpp_result_gen;
END_RCPP
}
// root_node_prob
arma::vec root_node_prob(const arma::vec& Pi, const arma::imat& S);
RcppExport SEXP aphylo_root_node_prob(SEXP PiSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(root_node_prob(Pi, S));
    return rcpp_result_gen;
END_RCPP
}
// probabilities
arma::mat probabilities(const arma::imat& annotations, const arma::vec& mu, const arma::vec& psi, const arma::imat& S, const arma::ivec& noffspring, const List& offspring);
RcppExport SEXP aphylo_probabilities(SEXP annotationsSEXP, SEXP muSEXP, SEXP psiSEXP, SEXP SSEXP, SEXP noffspringSEXP, SEXP offspringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type annotations(annotationsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type noffspring(noffspringSEXP);
    Rcpp::traits::input_parameter< const List& >::type offspring(offspringSEXP);
    rcpp_result_gen = Rcpp::wrap(probabilities(annotations, mu, psi, S, noffspring, offspring));
    return rcpp_result_gen;
END_RCPP
}
// LogLike
List LogLike(const arma::imat& annotations, const List& offspring, const arma::ivec& noffspring, const arma::vec& psi, const arma::vec& mu, const arma::vec& Pi, bool verb_ans);
RcppExport SEXP aphylo_LogLike(SEXP annotationsSEXP, SEXP offspringSEXP, SEXP noffspringSEXP, SEXP psiSEXP, SEXP muSEXP, SEXP PiSEXP, SEXP verb_ansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type annotations(annotationsSEXP);
    Rcpp::traits::input_parameter< const List& >::type offspring(offspringSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type noffspring(noffspringSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< bool >::type verb_ans(verb_ansSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLike(annotations, offspring, noffspring, psi, mu, Pi, verb_ans));
    return rcpp_result_gen;
END_RCPP
}
// sim_fun_on_tree
IntegerMatrix sim_fun_on_tree(const List& offspring, const arma::ivec& noffspring, const arma::vec& psi, const arma::vec& mu, const arma::vec& Pi, int P);
RcppExport SEXP aphylo_sim_fun_on_tree(SEXP offspringSEXP, SEXP noffspringSEXP, SEXP psiSEXP, SEXP muSEXP, SEXP PiSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type offspring(offspringSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type noffspring(noffspringSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_fun_on_tree(offspring, noffspring, psi, mu, Pi, P));
    return rcpp_result_gen;
END_RCPP
}
// sim_tree
IntegerMatrix sim_tree(int n);
RcppExport SEXP aphylo_sim_tree(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_tree(n));
    return rcpp_result_gen;
END_RCPP
}
// fast_table
IntegerMatrix fast_table(const arma::ivec& x);
RcppExport SEXP aphylo_fast_table(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_table(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_table_using_labels
arma::uvec fast_table_using_labels(const arma::ivec& x, const arma::ivec& ids);
RcppExport SEXP aphylo_fast_table_using_labels(SEXP xSEXP, SEXP idsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type ids(idsSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_table_using_labels(x, ids));
    return rcpp_result_gen;
END_RCPP
}
// as_po_tree
IntegerMatrix as_po_tree(const arma::imat& edges);
RcppExport SEXP aphylo_as_po_tree(SEXP edgesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type edges(edgesSEXP);
    rcpp_result_gen = Rcpp::wrap(as_po_tree(edges));
    return rcpp_result_gen;
END_RCPP
}
// list_offspring
List list_offspring(const arma::umat& edges);
RcppExport SEXP aphylo_list_offspring(SEXP edgesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type edges(edgesSEXP);
    rcpp_result_gen = Rcpp::wrap(list_offspring(edges));
    return rcpp_result_gen;
END_RCPP
}
