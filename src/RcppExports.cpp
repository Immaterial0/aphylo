// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// states
arma::imat states(int P);
RcppExport SEXP phylogenetic_states(SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(states(P));
    return rcpp_result_gen;
END_RCPP
}
// leaf_prob
arma::mat leaf_prob(const arma::imat& Z, const arma::imat& S, const arma::vec& psi, const arma::ivec& noffsprings);
RcppExport SEXP phylogenetic_leaf_prob(SEXP ZSEXP, SEXP SSEXP, SEXP psiSEXP, SEXP noffspringsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type noffsprings(noffspringsSEXP);
    rcpp_result_gen = Rcpp::wrap(leaf_prob(Z, S, psi, noffsprings));
    return rcpp_result_gen;
END_RCPP
}
// gain_loss_prob
arma::mat gain_loss_prob(const arma::vec& mu);
RcppExport SEXP phylogenetic_gain_loss_prob(SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(gain_loss_prob(mu));
    return rcpp_result_gen;
END_RCPP
}
// root_node_prob
arma::vec root_node_prob(const arma::vec& pi, const arma::imat& S);
RcppExport SEXP phylogenetic_root_node_prob(SEXP piSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(root_node_prob(pi, S));
    return rcpp_result_gen;
END_RCPP
}
// internal_prob
arma::mat internal_prob(arma::mat Pr, const arma::mat& M, const arma::imat& S, const arma::ivec& noffsprings, const List& offsprings);
RcppExport SEXP phylogenetic_internal_prob(SEXP PrSEXP, SEXP MSEXP, SEXP SSEXP, SEXP noffspringsSEXP, SEXP offspringsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Pr(PrSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type noffsprings(noffspringsSEXP);
    Rcpp::traits::input_parameter< const List& >::type offsprings(offspringsSEXP);
    rcpp_result_gen = Rcpp::wrap(internal_prob(Pr, M, S, noffsprings, offsprings));
    return rcpp_result_gen;
END_RCPP
}
// LogLike
List LogLike(const arma::imat& Z, const List& offsprings, const arma::ivec& noffsprings, const arma::vec& psi, const arma::vec& mu, const arma::vec& Pi);
RcppExport SEXP phylogenetic_LogLike(SEXP ZSEXP, SEXP offspringsSEXP, SEXP noffspringsSEXP, SEXP psiSEXP, SEXP muSEXP, SEXP PiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const List& >::type offsprings(offspringsSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type noffsprings(noffspringsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Pi(PiSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLike(Z, offsprings, noffsprings, psi, mu, Pi));
    return rcpp_result_gen;
END_RCPP
}
