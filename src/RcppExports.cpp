// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// normal_prop
NumericVector normal_prop(const NumericVector& x, const NumericVector& lb, const NumericVector& ub, const NumericVector& scale);
RcppExport SEXP phylogenetic_normal_prop(SEXP xSEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(normal_prop(x, lb, ub, scale));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_sampler
NumericVector gibbs_sampler(const Function& fun, const NumericVector& x, const NumericVector& lb, const NumericVector& ub, double scale);
RcppExport SEXP phylogenetic_gibbs_sampler(SEXP funSEXP, SEXP xSEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type fun(funSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_sampler(fun, x, lb, ub, scale));
    return rcpp_result_gen;
END_RCPP
}
// MCMCcpp
NumericMatrix MCMCcpp(Function& fun, NumericVector theta0, int nbatch, const NumericVector& lb, const NumericVector& ub, const NumericVector& scale);
RcppExport SEXP phylogenetic_MCMCcpp(SEXP funSEXP, SEXP theta0SEXP, SEXP nbatchSEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Function& >::type fun(funSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< int >::type nbatch(nbatchSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMCcpp(fun, theta0, nbatch, lb, ub, scale));
    return rcpp_result_gen;
END_RCPP
}
// states
arma::imat states(int P);
RcppExport SEXP phylogenetic_states(SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(states(P));
    return rcpp_result_gen;
END_RCPP
}
// prob_mat
arma::mat prob_mat(const arma::vec& pr);
RcppExport SEXP phylogenetic_prob_mat(SEXP prSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pr(prSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_mat(pr));
    return rcpp_result_gen;
END_RCPP
}
// leaf_prob
arma::mat leaf_prob(const arma::imat& Z, const arma::imat& S, const arma::vec& psi, const arma::ivec& noffspring);
RcppExport SEXP phylogenetic_leaf_prob(SEXP ZSEXP, SEXP SSEXP, SEXP psiSEXP, SEXP noffspringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type noffspring(noffspringSEXP);
    rcpp_result_gen = Rcpp::wrap(leaf_prob(Z, S, psi, noffspring));
    return rcpp_result_gen;
END_RCPP
}
// root_node_prob
arma::vec root_node_prob(const arma::vec& pi, const arma::imat& S);
RcppExport SEXP phylogenetic_root_node_prob(SEXP piSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(root_node_prob(pi, S));
    return rcpp_result_gen;
END_RCPP
}
// internal_prob
arma::mat internal_prob(arma::mat Pr, const arma::vec& mu, const arma::imat& S, const arma::ivec& noffspring, const List& offspring);
RcppExport SEXP phylogenetic_internal_prob(SEXP PrSEXP, SEXP muSEXP, SEXP SSEXP, SEXP noffspringSEXP, SEXP offspringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Pr(PrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type noffspring(noffspringSEXP);
    Rcpp::traits::input_parameter< const List& >::type offspring(offspringSEXP);
    rcpp_result_gen = Rcpp::wrap(internal_prob(Pr, mu, S, noffspring, offspring));
    return rcpp_result_gen;
END_RCPP
}
// LogLike
List LogLike(const arma::imat& Z, const List& offspring, const arma::ivec& noffspring, const arma::vec& psi, const arma::vec& mu, const arma::vec& Pi, bool verb_ans);
RcppExport SEXP phylogenetic_LogLike(SEXP ZSEXP, SEXP offspringSEXP, SEXP noffspringSEXP, SEXP psiSEXP, SEXP muSEXP, SEXP PiSEXP, SEXP verb_ansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const List& >::type offspring(offspringSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type noffspring(noffspringSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< bool >::type verb_ans(verb_ansSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLike(Z, offspring, noffspring, psi, mu, Pi, verb_ans));
    return rcpp_result_gen;
END_RCPP
}
// sim_fun_on_tree
arma::umat sim_fun_on_tree(const List& offspring, const arma::ivec& noffspring, const arma::vec& psi, const arma::vec& mu, const arma::vec& Pi, int P);
RcppExport SEXP phylogenetic_sim_fun_on_tree(SEXP offspringSEXP, SEXP noffspringSEXP, SEXP psiSEXP, SEXP muSEXP, SEXP PiSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type offspring(offspringSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type noffspring(noffspringSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_fun_on_tree(offspring, noffspring, psi, mu, Pi, P));
    return rcpp_result_gen;
END_RCPP
}
