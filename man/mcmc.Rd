% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcmc.r
\name{mcmc}
\alias{mcmc}
\title{Markov Chain Monte Carlo}
\usage{
mcmc(fun, initial, nbatch = 20000L, scale = 1, burnin = 1000L,
  ub = rep(1 - 1e-20, length(initial)), lb = rep(1e-20, length(initial)))
}
\arguments{
\item{fun}{A function. Returns the log-likelihood}

\item{initial}{A numeric vector. Initial values of the parameters.}

\item{nbatch}{Integer scalar. Number of MCMC runs.}

\item{scale}{Numeric scalar. Step size, \eqn{z\times scale}{z*scale}, where
\eqn{z\sim N(0,1)}{z~N(0,1)}.}

\item{burnin}{Integer scalar. Number of burn-in samples.}

\item{ub}{Numeric vector of length \code{length(initial)}. Upper bounds}

\item{lb}{Numeric vector of length \code{length(initial)}. Lower bounds}
}
\value{
\item{batch}{Numeric matrix of size \code{length(initial) x nbatch}.}
\item{final}{Numeric vector of length \code{length(initial)}. Final state of the parameters.}
\item{initial}{Numeric vector of length \code{length(initial)}. 
Initial state of the parameters.}
\item{fun}{Objective function.}
}
\description{
Markov Chain Monte Carlo
}
\details{
This function implements MCMC using the Hastings ratio with
scaled standard normal propositions for each parameter. For each parameter
the transition function is 

\deqn{
\theta' = \theta + scale*z
}

Where \eqn{z} has standard normal distribution.

Lower and upper bounds are treated using reflecting boundaries, this is, 
if the proposed \eqn{\theta'} is greater than the \code{ub}, then \eqn{\theta' - ub}
is substracted from \eqn{ub}. At the same time, if it is less than \code{lb}, then
\eqn{lb - \theta'} is added to \code{lb} iterating until \eqn{\theta} is within
\code{[lb, ub]}.
}
\examples{
# Parameters
set.seed(1231)
n <- 1e3
pars <- c(mean = 2.6, sd = 3)

# Generating data and writing the log likelihood function
D <- rnorm(n, pars[1], pars[2])
fun <- function(x) {
  x <- log(dnorm(D, x[1], x[2]))
  if (any(is.infinite(x)))
    return(-Inf)
  sum(x)
}
ans <- mcmc(fun, rep(1,2), nbatch = 2e3, scale = .1, ub = 10, lb = 0)
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(1,2))
boxplot(ans$batch, 
        main = expression("Posterior distribution of"~mu~and~sigma),
        names =  expression(mu, sigma), horizontal = TRUE,
        col  = blues9[c(4,9)],
        sub = bquote(mu == .(pars[1])~", and"~sigma == .(pars[2]))
)
abline(v = pars, col  = blues9[c(4,9)], lwd = 2, lty = 2)

plot(apply(ans$batch, 1, fun), type = "l",
     main = "LogLikelihood",
     ylab = expression(L("{"~mu,sigma~"}"~"|"~D)) 
)
par(oldpar)
}

